{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Modelresolvers","text":"<p>Modelresolvers is a Python GraphQL package, inspired by TypeGraphQL, on top of Strawberry to structure your project by feature like entity instead of operation type which means mutation and query to manage it easier.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#022","title":"0.2.2","text":""},{"location":"changelog/#docs","title":"Docs","text":"<ul> <li>add description and readme to PYPI #39 by cikay</li> </ul>"},{"location":"changelog/#021","title":"0.2.1","text":""},{"location":"changelog/#upgrades","title":"Upgrades","text":"<p>install specific strawberry version #36 by cikay</p>"},{"location":"changelog/#docs_1","title":"Docs","text":"<ul> <li>Highlight code block #35 by cikay</li> <li>Improve documentation #34 by cikay</li> <li>add code copy button config #33 by cikay</li> <li>add documentation link to readme #32 by cikay</li> <li>Serve documents with mkdocs and github page #31</li> </ul>"},{"location":"changelog/#020","title":"0.2.0","text":""},{"location":"changelog/#upgrades_1","title":"Upgrades","text":"<p>feat: upgrade strawberry from 0.125.0 to 0.151.2 #27 by cikay</p>"},{"location":"changelog/#docs_2","title":"Docs","text":"<ul> <li>Document FastAPI example #23 by cikay</li> <li>Update fastapi example #24 by cikay</li> <li>Document get started #25 by cikay</li> <li>fix: pass keyword args #28 by cikay</li> </ul>"},{"location":"changelog/#internal","title":"Internal","text":"<ul> <li>Refactor group_by_opr_type function #26 by cikay</li> </ul>"},{"location":"fastapi_example/","title":"FastAPI example","text":""},{"location":"fastapi_example/#project-setup","title":"Project Setup","text":"<p>This project folder structure is like the below.</p> <p><pre><code>modelresolvers-fastapi-example\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 models\n\u2502   \u2514\u2500\u2500 user.py\n\u251c\u2500\u2500 Pipfile\n\u251c\u2500\u2500 Pipfile.lock\n\u2514\u2500\u2500 resolvers\n    \u2514\u2500\u2500 user.py\n</code></pre> Create a virtual environment with pipenv. Since <code>modelresolvers</code> requires Python3.10  we create virtual env by specify Python version</p> <pre><code>pipenv --python 3.10\n</code></pre> <p>Install dependencies</p> <pre><code>pipenv install fastapi modelresolvers uvicorn\n</code></pre> <p>Activate virtual environment</p> <pre><code>pipenv shell\n</code></pre>"},{"location":"fastapi_example/#define-user-model","title":"Define User model","text":"<p>Create <code>user.py</code> under <code>models</code> folder</p> <p>Import <code>strawberry</code> module to define GraphQL type</p> <pre><code>import strawberry\n</code></pre> <p>Create User model</p> <pre><code>@strawberry.type\nclass User:\n    id: int | None\n    firstname: str\n    lastname: str\n</code></pre> <p>Since the model is a strawberry GraphQL type it must be decorated with <code>strawberry.type</code> decorator.</p> <p><code>id</code> field is optional because we want to set it automatically instead of getting it from the client.</p> <p>The entire file code</p> <pre><code>import strawberry\n\n\n@strawberry.type\nclass User:\n    id: int | None\n    firstname: str\n    lastname: str\n</code></pre>"},{"location":"fastapi_example/#resolvers","title":"Resolvers","text":"<p>Create <code>user.py</code> under <code>resolvers</code> folder</p> <p>Import modelresolvers</p> <pre><code>from modelresolvers import ModelResolvers\n</code></pre> <p>Import the User model that we just created</p> <pre><code>from models.user import User\n</code></pre> <p>Create ModelResolvers instance for user model resolvers</p> <pre><code>user_resolvers = ModelResolvers()\n</code></pre> <p>Since we are simulating a real-world example we just define a user list</p> <pre><code>users = [\n    User(id=1, firstname=\"John\", lastname=\"Doe\"),\n    User(id=2, firstname=\"Jane\", lastname=\"Doe\"),\n]\n</code></pre> <p>Querying a single user</p> <pre><code>@user_resolvers.query(name=\"user\")\ndef user(id: int) -&gt; User | None:\n    return next((user for user in users if id == user.id), None)\n</code></pre> <p>To make a function a query we decorate it with the query decorator of ModelResolvers instance. The name of the query decorator parameter is optional. The default is the function name that is decorated which in this case is user. The function parameters and return parameter type should be specified by type hints otherwise the strawberry raises error. The user function searches the user based on the id it is not found it then returns <code>None</code></p> <p><pre><code>@user_resolvers.query(name=\"users\")\ndef get_users() -&gt; list[User]:\n    return users\n</code></pre> <code>get_users</code> query returns all users available in the <code>users</code> list. Pay close attention to the function name and the name argument of the query decorator. They are different. <code>get_users</code> query will be displayed as <code>users</code> in the GraphQL client UI.</p> <p>Another ModelResolvers decorator is mutation.</p> <pre><code>@user_resolvers.mutation(name=\"add_user\")\ndef add_user(firstname: str, lastname: str) -&gt; User:\n    user = User(id=len(users) + 1, firstname=firstname, lastname=lastname)\n    users.append(user)\n    return user\n</code></pre> <p>firstname and lastname pass by GraphQL client. The id field is set on the backend side. It is calculated as users list length plus 1. Then the created user returns to the client.</p> <p>The entire file code</p> <pre><code>from modelresolvers import ModelResolvers\n\nfrom models.user import User\n\n\nuser_resolvers = ModelResolvers()\n\nusers = [\n    User(id=1, firstname=\"John\", lastname=\"Doe\"),\n    User(id=2, firstname=\"Jane\", lastname=\"Doe\"),\n]\n\n\n@user_resolvers.query(name=\"user\")\ndef user(id: int) -&gt; User | None:\n    return next((user for user in users if id == user.id), None)\n\n\n@user_resolvers.query(name=\"users\")\ndef get_users() -&gt; list[User]:\n    return users\n\n\n@user_resolvers.mutation(name=\"add_user\")\ndef add_user(firstname: str, lastname: str) -&gt; User:\n    user = User(id=len(users) + 1, firstname=firstname, lastname=lastname)\n    users.append(user)\n    return user\n</code></pre>"},{"location":"fastapi_example/#main-file","title":"Main file","text":"<p>Create <code>main.py</code> file</p> <p>Import Schema module from modelresolvers package</p> <pre><code>from modelresolvers import Schema\n</code></pre> <p>Import FastAPI module from fastapi package</p> <pre><code>from fastapi import FastAPI\n</code></pre> <p>Import GraphQLRouter module from strawberry package</p> <pre><code>from strawberry.fastapi import GraphQLRouter\n</code></pre> <p>Import resolvers instance you have just created</p> <pre><code>from resolvers.user import user_resolvers\n</code></pre> <p>When you create an modelresolvers Schema it will also create a strawberry schema as modelresolvers is based on strawberry At this point, we need to strawberry schema rather than modelresolvers Schema. We get strawberry schema from modelresolvers schema</p> <pre><code>schema = Schema(models_resolvers=[user_resolvers]).strawberry_schema\n</code></pre> <p>Create GraphQL router</p> <pre><code>graphql_app = GraphQLRouter(schema)\n</code></pre> <p>Create fastapi app and add GraphQL router to the app</p> <pre><code>app = FastAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n</code></pre> <p>The entire file code</p> <pre><code>from modelresolvers import Schema\n\nfrom fastapi import FastAPI\nfrom strawberry.fastapi import GraphQLRouter\n\nfrom resolvers.user import user_resolvers\n\nschema = Schema(models_resolvers=[user_resolvers]).strawberry_schema\n\ngraphql_app = GraphQLRouter(schema)\n\napp = FastAPI()\napp.include_router(graphql_app, prefix=\"/graphql\")\n</code></pre> <p>Run the application</p> <pre><code>uvicorn main:app --reload\n</code></pre> <p>Go to <code>http://127.0.0.1:8000/graphql</code> and run queries and mutations</p>"},{"location":"get_started/","title":"Get started","text":"<p>Create virtual environment with 3.10 since modelresolvers require 3.10 and above</p> <p><pre><code>pipenv --python 3.10\n</code></pre> Activate virtual environment</p> <pre><code>pipenv shell\n</code></pre> <p>Install modelresolvers</p> <pre><code>pipenv install modelresolvers\n</code></pre> main.py<pre><code>import strawberry\n\nfrom modelresolvers import ModelResolvers, Schema\n\n@strawberry.type\nclass User:\n    firstname: str\n    lastname: str\n\n\nusers = [\n    User(firstname=\"John\", lastname=\"Doe\"),\n    User(firstname=\"Jahe\", lastname=\"Doe\"),\n]\n\n\n@user_resolvers.query(name=\"user\")\ndef user() -&gt; User:\n    return users[0]\n\n\n@user_resolvers.mutation(name=\"add_user\")\ndef add_user(firstname: str, lastname: str) -&gt; User:\n    user = User(firstname=firstname, lastname=lastname)\n    users.append(user)\n    return user\n</code></pre> <p>We are going to run the app by strawberry so we need strawberry schema. modelresolvers Schema converts its schema to strawberry schema. modelresolvers Schema has an attribute called <code>strawberry_schema</code>. So we will run the app based on strawberry schema</p> <pre><code>schema = Schema(models_resolvers=[user_resolvers]).strawberry_schema\n</code></pre> <p>The entire code is below.</p> main.py<pre><code>import strawberry\nfrom modelresolvers import ModelResolvers, Schema\n\n\nuser_resolvers = ModelResolvers()\n\n\n@strawberry.type\nclass User:\n    firstname: str\n    lastname: str\n\n\nusers = [\n    User(firstname=\"John\", lastname=\"Doe\"),\n    User(firstname=\"Jahe\", lastname=\"Doe\"),\n]\n\n\n@user_resolvers.query(name=\"user\")\ndef user() -&gt; User:\n    return users[0]\n\n\n@user_resolvers.mutation(name=\"add_user\")\ndef add_user(firstname: str, lastname: str) -&gt; User:\n    user = User(firstname=firstname, lastname=lastname)\n    users.append(user)\n    return user\n\n\nschema = Schema(models_resolvers=[user_resolvers]).strawberry_schema\n</code></pre> <p>Run the app in your terminal</p> <pre><code>strawberry server main\n</code></pre> <p>Go to <code>http://0.0.0.0:8000/graphql</code> and run your mutations and queries.</p>"}]}